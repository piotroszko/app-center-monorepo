// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  isDeleted Boolean  @default(false)
  email     String   @unique
  name      String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
  messages Message[]
  channels Channel[]
  files File[]
  invites ChannelInvite[] @relation(name: "invites")
  sendInvites ChannelInvite[] @relation(name: "sendInvites")

  ownedChannels Channel[] @relation(name: "owners")
}

model Role {
  id        String   @id @default(cuid())
  isDeleted Boolean  @default(false)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  permissions Permission[]
}

model Permission {
  id        String   @id @default(cuid())
  isDeleted Boolean  @default(false)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model Settings {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id        String   @id @default(cuid())
  isDeleted Boolean  @default(false)
  type      String  // group, room or private
  name      String
  description String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  users User[]
  owners User[] @relation(name: "owners")
  invites ChannelInvite[]
}

model ChannelInvite {
  id        String   @id @default(cuid())
  message  String?
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  channel Channel @relation(fields: [channelId], references: [id])
  channelId String
  user User @relation(fields: [userId], references: [id], name: "invites")
  userId String
  inviter User @relation(fields: [inviterId], references: [id], name: "sendInvites")
  inviterId String
}

model Message {
  id        Int   @id @default(autoincrement())
  isDeleted Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers Message[] @relation(name: "AnswerTo")
  answerTo  Message? @relation(name: "AnswerTo", fields: [answerToId], references: [id])
  answerToId Int?

  user User @relation(fields: [userId], references: [id])
  userId String
  
  channel Channel @relation(fields: [channelId], references: [id])
  channelId String
}

model Log {
  id        String   @id @default(cuid())
  server    String  // go, nextjs, or module name
  level     String // info, warn, error
  category  String // auth, db, api, etc.
  message   String // log message
  createdAt DateTime @default(now())
}

model File {
  id        String   @id @default(cuid())
  isDirectory Boolean @default(false)
  filename  String // original filename with extension or directory name
  mimetype  String // file type or "directory"
  format   String // file extension or "directory"
  path     String // file path or directory path
  size     Int // file size in bytes or 0 for directory
  shareType String // public, private, link ~ default is private
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  
  User User @relation(fields: [userId], references: [id])
  userId String
}