// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
  messages Message[]
  channels Channel[]
  privateChannels PrivateChannel[]

  channelsOwned Channel[] @relation(name: "owner")
}

model Role {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  permissions Permission[]
}

model Permission {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model Settings {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// private channel are direct messages between two users with id of "user1-user2Id" sorted aplhabetically
model PrivateChannel {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  users User[] // only two users
}

// channel is either a group or a room
model Channel {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  users User[]
  owner User @relation(fields: [ownerId], references: [id], name: "owner")
  ownerId String
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  userId String
  
  channel Channel @relation(fields: [channelId], references: [id])
  channelId String

  privateChannel PrivateChannel @relation(fields: [privateChannelId], references: [id])
  privateChannelId String
}