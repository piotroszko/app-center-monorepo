generator client {
  provider        = "go run github.com/steebchen/prisma-client-go"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Permission {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Role      Role[]   @relation("PermissionToRole")
}

model Role {
  id         String       @id
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Permission Permission[] @relation("PermissionToRole")
  User       User[]       @relation("RoleToUser")
}

model Settings {
  id        String   @id
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model User {
  id             String      @id
  email          String      @unique
  name           String      @unique
  password       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  Directory      Directory[]
  File           File[]
  Message        Message[]
  Channel        Channel[]   @relation("ChannelToUser")
  Role           Role[]      @relation("RoleToUser")
  Channel_owners Channel[]   @relation("owners")
}

model Channel {
  id          String    @id
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  type        String
  Message     Message[]
  User        User[]    @relation("ChannelToUser")
  User_owners User[]    @relation("owners")
}

model Message {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  userId    String
  channelId String
  Channel   Channel  @relation(fields: [channelId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id
  server    String
  level     String
  category  String
  message   String
  createdAt DateTime @default(now())
}

model File {
  id          String    @id
  filename    String
  mimetype    String
  format      String
  shareType   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  userId      String
  directoryId String
  Directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id])
}

model Directory {
  id              String      @id
  name            String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  parentId        String?
  userId          String
  shareType       String
  Directory       Directory?  @relation("DirectoryToDirectory", fields: [parentId], references: [id], onDelete: Cascade)
  other_Directory Directory[] @relation("DirectoryToDirectory")
  User            User        @relation(fields: [userId], references: [id])
  File            File[]
}
